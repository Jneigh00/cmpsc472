
semaphore seated;           // number of people seated (excludes Father)
semaphore carve_turkey;     // turkey is carved
semaphore hayride_queue;    // mutex for hayride queue
semaphore excuse_queue;     // mutex for to be excused queue

int num_seated = 0;

atomic void print(string str) {
    cout << str << endl;
}

void signal_seated() {
    wait(seated);
        num_seated += 1;
    signal(seated);
}

void mother() {
    // make meal
    // put foot in oven
    // go on hayride (with child 8)
    // enter house and wash up
    // put meal on table
    signal_seated()
    print("Mother is sitting at table.")

    // eat dinner
    // read favorite book

}

void father() {
    //hook up horses
    print("         Father is hooking up the horses")
    print("         Father is ready to give Hayrides")
    //give hayrides
    
    
    
    //everyone got hayrides
    //wait for everyone to be seated
    //carve turkey
    print("         Father is carving the turkey")
    //eat
    //excuse everyone and fall asleep
    print("         Father is done eating and excuses everyone from the table")
    
    print("         Father is asleep and watching football")
}

void child(int id) {
    // rake leaves
    // go on hayride
    // clean up and sit at table
    signal_seated()
    print("Child {n} is sitting at table.")

    // eat dinner
    // <be excused>
    // go out and play
}

void relative(int id) {
    // arrive at farm
    // go on hayride
    // clean up and sit at table
    signal_seated()
    print("Relative {n} is sitting at table.")

    // eat dinner
    // <be excused>
    // go home
}

main() {
    initialsem(seated, 1);
    initialsem(carve_turkey, 0);

    // queue controls
    initialsem(hayride_queue, 1);
    initialsem(excuse_queue, 1);

    cobegin {
        // spawn parents
        mother();
        father();

        // spawn children
        child(1);
        child(2);
        child(3);
        child(4);
        child(5);
        child(6);
        child(7);
        child(8);

        // spawn relatives
        relative(1);
        relative(2);
        relative(3);
        relative(4);
        relative(5);
        relative(6);
    }
}
